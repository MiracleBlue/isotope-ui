@tree-item-height: @scale-b-xl * 1rem;

.tree-view.list-tree {

  .li-mixin (@fg-subtle, @tree-item-height);

  padding: 0;

  li {
    &.selected,
    &:not(.list-nested-item).selected,
    &.list-nested-item.selected > .list-item {
      color: @base-fg;
      &:before {
        border-top-left-radius: @component-border-radius;
        border-bottom-left-radius: @component-border-radius;
      }
    }

    //add these variations in here as well for specicifty
    .li-variation-mixin ( status-modified, @fg-modified, lighten(@fg-modified, 12%) );
    .li-variation-mixin ( status-added,    @fg-added,    lighten(@fg-added, 12%) );
  }

    li.project-root,
    li.project-root:not(.list-nested-item),
    li.project-root.list-nested-item > .list-item {
      //align it with tab titles
      min-height: ~"calc("@tab-height ~"- 2px)";
      line-height: ~"calc("@tab-height ~"- 2px)";
    }
    li.project-root.selected:before,
    li.project-root:not(.list-nested-item).selected:before,
    li.project-root.list-nested-item.selected > .list-item:before {
      height: ~"calc("@tab-height ~"- 2px)";
      min-height: ~"calc("@tab-height ~"- 2px)";
      line-height: ~"calc("@tab-height ~"- 2px)";
    }

  // hide pointer icons in treeview
  &.has-collapsable-children {
    .list-nested-item > .list-item:before {
      display: none;
    }
    .list-nested-item > .list-tree > li,
    .list-nested-item > .list-group > li {
      margin-left: 0;
    }
  }

  // correct git icon size
  .icon-file-directory[data-name=".git"] {
    &:before {
      top: 2px;
      font-size: medium;
    }
  }

  &:focus {
    li {
      &.selected,
      &:not(.list-nested-item).selected,
      &.list-nested-item.selected > .list-item {
        &:before {
          background: @level-1-bg;
        }
      }
    }
  }
}

body:not([data-isotope-ui-minimal='true']) {
  .tree-view-resizer {
    padding-left: @space/3;
  }
  .tree-view.list-tree {
    padding-top: @space/3;
  }
}
body([data-isotope-ui-minimal='true']) {
  li.project-root,
  li.project-root:not(.list-nested-item),
  li.project-root.list-nested-item > .list-item {
    //align it with tab titles
    min-height: ~"calc("@tab-height ~"- 4px)";
    line-height: ~"calc("@tab-height ~"- 4px)";
  }
  li.project-root.selected:before,
  li.project-root:not(.list-nested-item).selected:before,
  li.project-root.list-nested-item.selected > .list-item:before {
    height: ~"calc("@tab-height ~"- 4px)";
    min-height: ~"calc("@tab-height ~"- 4px)";
    line-height: ~"calc("@tab-height ~"- 4px)";
  }
}

.right {
  .tree-view.list-tree {
    li {
      &.selected,
      &:not(.list-nested-item).selected,
      &.list-nested-item.selected > .list-item {
        &:before {
          border-top-left-radius: 0;
          border-bottom-left-radius: 0;
          border-top-right-radius: @component-border-radius;
          border-bottom-right-radius: @component-border-radius;
        }
      }
    }
  }
  .tree-view-resizer {
    padding-left: 0;
    padding-right: @space/3;
  }
}

body[data-isotope-ui-spacious='true'] .tree-view.list-tree {

  li,
  li:not(.list-nested-item),
  li.list-nested-item > .list-item {
    min-height: @component-line-height;
    line-height: @component-line-height;
  }

  li.selected:before,
  li:not(.list-nested-item).selected:before,
  li.list-nested-item.selected > .list-item:before {
    height: @component-line-height;
    min-height: @component-line-height;
    line-height: @component-line-height;
  }
}
