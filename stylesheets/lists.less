.list-item-selected (@color) {
  .selected,
  li:not(.list-nested-item).selected,
  li.list-nested-item.selected > .list-item {
    color: @color;
    &:before {
      background: @ui-theme-color;
      border-top-left-radius: @component-border-radius;
      border-bottom-left-radius: @component-border-radius;
    }
    &.status-modified {
      color: @fg-warning;
    }
  }
}


.list-group,
.list-tree {
  li {
    min-height: @component-line-height;
    line-height: @component-line-height;
    padding-left: @modular-scale-s * 1rem;
  }
  li:not(.list-nested-item),
  li.list-nested-item > .list-item {
    color: @fg-subtle;
    line-height: @component-line-height;
  }

  .list-item-selected (@base-fg);
  &:focus {
    .list-item-selected (@fg-selected);
  }

  .icon {
    display: inline-block;
    &:before{
      height: 100%;
      line-height: 100%;
    }
  }
  .no-icon {
    padding-left: @component-icon-size + @component-icon-padding;
  }

  .status {
    float: left;
  }

  .primary-line,
  .secondary-line {
    display: inline-block;
  }
  .primary-line {
    color: @fg-highlight;
  }

  .selected {
    color: @fg-selected;

    &:before {
      line-height: @component-line-height;
      min-height: @component-line-height;
      background-color: @level-4-bg;
    }

    .primary-line {
      color: @fg-selected;
    }
  }


  //not sure what this generate-list stuff is for
  .generate-list-item-text-color(@class) {
    li:not(.list-nested-item).text-@{class},
    li.list-nested-item.text-@{class} > .list-item {
      /* .color(@class) */;
    }
  }
  .generate-list-item-text-color(subtle);
  .generate-list-item-text-color(info);
  .generate-list-item-text-color(success);
  .generate-list-item-text-color(warning);
  .generate-list-item-text-color(error);
  .generate-list-item-text-color(selected);

  .generate-list-item-status-color(@color, @status) {
    li:not(.list-nested-item).status-@{status},
    li.list-nested-item.status-@{status} > .list-item {
      color: @color;
    }
  }
  .generate-list-item-status-color(@fg-subtle, ignored);
  .generate-list-item-status-color(@fg-added, added);
  .generate-list-item-status-color(@fg-renamed, renamed);
  .generate-list-item-status-color(@fg-modified, modified);
  .generate-list-item-status-color(@fg-removed, removed);

}

.select-list ol.list-group,
&.select-list ol.list-group {
  margin: 0;

  li.two-lines {
    height: @component-line-height;
    .secondary-line {
      color: @fg-subtle;
    }
    &.selected .secondary-line {
      color: fade(@fg-highlight, 50%);
      text-shadow: none;
    }
  }

  // We want to highlight the background of the list items because we dont
  // know their size.
  li.selected {
    background-color: @level-3-bg;
    color: @fg-selected;
    &:before{ display: none; }
  }

  &.mark-active {
    @active-icon-size: 14px;

    // pad in front of the text where the icon would be We'll pad the non-
    // active items with a 'fake' icon so other classes can pad the item
    // without worrying about the icon padding.
    li:before,
    li.selected:before {
      content: '';
      background-color: transparent;
      position: static;
      display: inline-block;
      left: auto;
      right: auto;
      height: @component-line-height;
      line-height: @component-line-height;
      width: @active-icon-size;
      float: left;
    }
    > li:not(.active):before {
      margin-right: @component-icon-padding;
    }
    li.active {
      .octicon(check, @active-icon-size);
      &:before {
        margin-right: @component-icon-padding;
        color: @fg-success;
        height: @component-line-height;
        line-height: @component-line-height;

      }
    }
  }
}

.select-list.popover-list {
  background-color: @overlay-background-color;
  box-shadow: 0 2px 8px 1px rgba(0, 0, 0, 0.3);
  padding: @component-padding/2;
  border-radius: @component-border-radius;

  atom-text-editor.mini {
    margin-bottom: @component-padding/2;
  }

  .list-group li {
    padding-left: @component-padding/2;
  }
}

.ui-sortable {
  li {
    line-height: 2.5;
  }

  // For sortable lists in the settings view
  li.ui-sortable-placeholder {
    visibility: visible !important;
    background-color: darken(@pane-item-background-color, 10%);
  }
}

li.ui-draggable-dragging,
li.ui-sortable-helper {
  line-height: @component-line-height;
  height: @component-line-height;
  border: 0;
  border-radius: 0;
  list-style: none;
  padding: 0 @component-padding;
  background: @level-2-bg;
  box-shadow: 0 0 1px @level-5-bg;
}
